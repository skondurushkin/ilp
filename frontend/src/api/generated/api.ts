/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Greeting
 */
export interface Greeting {
    /**
     * greeting message
     * @type {string}
     * @memberof Greeting
     */
    greeting: string;
}

/**
 * IlpApi - axios parameter creator
 * @export
 */
export const IlpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Say hello to the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ilp/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Say hello to the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ilp/hello2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * IlpApi - functional programming interface
 * @export
 */
export const IlpApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = IlpApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Say hello to the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sayHello(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Greeting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sayHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Say hello to the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sayHello2(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Greeting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sayHello2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * IlpApi - factory interface
 * @export
 */
export const IlpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IlpApiFp(configuration);
    return {
        /**
         *
         * @summary Say hello to the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello(options?: any): AxiosPromise<Greeting> {
            return localVarFp.sayHello(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Say hello to the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello2(options?: any): AxiosPromise<Greeting> {
            return localVarFp.sayHello2(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IlpApi - object-oriented interface
 * @export
 * @class IlpApi
 * @extends {BaseAPI}
 */
export class IlpApi extends BaseAPI {
    /**
     *
     * @summary Say hello to the client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IlpApi
     */
    public sayHello(options?: AxiosRequestConfig) {
        return IlpApiFp(this.configuration)
            .sayHello(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Say hello to the client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IlpApi
     */
    public sayHello2(options?: AxiosRequestConfig) {
        return IlpApiFp(this.configuration)
            .sayHello2(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
