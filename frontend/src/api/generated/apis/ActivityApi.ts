/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

import type {
    ActivityRequest,
    ActivityResponse,
    ActivityUpdateRequest,
    ErrorMessage,
    PageRequest,
    PaginatedActivityResponse,
} from '../models';
import {
    ActivityRequestFromJSON,
    ActivityRequestToJSON,
    ActivityResponseFromJSON,
    ActivityResponseToJSON,
    ActivityUpdateRequestFromJSON,
    ActivityUpdateRequestToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    PageRequestFromJSON,
    PageRequestToJSON,
    PaginatedActivityResponseFromJSON,
    PaginatedActivityResponseToJSON,
} from '../models';

export interface BrowseActivitiesRequest {
    pageRequest?: PageRequest;
}

export interface CreateActivityRequest {
    activityRequest: ActivityRequest;
}

export interface GetActivityByIdRequest {
    activityId: number;
}

export interface SearchActivityRequest {
    searchKey: string;
}

export interface UpdateActivityRequest {
    activityUpdateRequest: ActivityUpdateRequest;
}

/**
 *
 */
export class ActivityApi extends runtime.BaseAPI {
    /**
     * paginated activities view
     */
    async browseActivitiesRaw(
        requestParameters: BrowseActivitiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PaginatedActivityResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/activities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PageRequestToJSON(requestParameters.pageRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedActivityResponseFromJSON(jsonValue));
    }

    /**
     * paginated activities view
     */
    async browseActivities(
        requestParameters: BrowseActivitiesRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PaginatedActivityResponse> {
        const response = await this.browseActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create new activity record
     */
    async createActivityRaw(
        requestParameters: CreateActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ActivityResponse>> {
        if (requestParameters.activityRequest === null || requestParameters.activityRequest === undefined) {
            throw new runtime.RequiredError(
                'activityRequest',
                'Required parameter requestParameters.activityRequest was null or undefined when calling createActivity.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/activity`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ActivityRequestToJSON(requestParameters.activityRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityResponseFromJSON(jsonValue));
    }

    /**
     * create new activity record
     */
    async createActivity(
        requestParameters: CreateActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ActivityResponse> {
        const response = await this.createActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get activity by identifier
     */
    async getActivityByIdRaw(
        requestParameters: GetActivityByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ActivityResponse>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError(
                'activityId',
                'Required parameter requestParameters.activityId was null or undefined when calling getActivityById.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/activity/{activity_id}`.replace(
                    `{${'activity_id'}}`,
                    encodeURIComponent(String(requestParameters.activityId)),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityResponseFromJSON(jsonValue));
    }

    /**
     * get activity by identifier
     */
    async getActivityById(
        requestParameters: GetActivityByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ActivityResponse> {
        const response = await this.getActivityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * search for activity
     */
    async searchActivityRaw(
        requestParameters: SearchActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<ActivityResponse>>> {
        if (requestParameters.searchKey === null || requestParameters.searchKey === undefined) {
            throw new runtime.RequiredError(
                'searchKey',
                'Required parameter requestParameters.searchKey was null or undefined when calling searchActivity.',
            );
        }

        const queryParameters: any = {};

        if (requestParameters.searchKey !== undefined) {
            queryParameters['search_key'] = requestParameters.searchKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/activity/search`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityResponseFromJSON));
    }

    /**
     * search for activity
     */
    async searchActivity(
        requestParameters: SearchActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<ActivityResponse>> {
        const response = await this.searchActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update activity record
     */
    async updateActivityRaw(
        requestParameters: UpdateActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ActivityResponse>> {
        if (requestParameters.activityUpdateRequest === null || requestParameters.activityUpdateRequest === undefined) {
            throw new runtime.RequiredError(
                'activityUpdateRequest',
                'Required parameter requestParameters.activityUpdateRequest was null or undefined when calling updateActivity.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/activity`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ActivityUpdateRequestToJSON(requestParameters.activityUpdateRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityResponseFromJSON(jsonValue));
    }

    /**
     * update activity record
     */
    async updateActivity(
        requestParameters: UpdateActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ActivityResponse> {
        const response = await this.updateActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
