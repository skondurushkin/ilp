/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

import type {
    ActivityRequest,
    ActivityResponse,
    ErrorMessage,
    PageRequest,
    PaginatedActivityResponse,
} from '../models';
import {
    ActivityRequestFromJSON,
    ActivityRequestToJSON,
    ActivityResponseFromJSON,
    ActivityResponseToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    PageRequestFromJSON,
    PageRequestToJSON,
    PaginatedActivityResponseFromJSON,
    PaginatedActivityResponseToJSON,
} from '../models';

export interface BrowseActivitiesRequest {
    pageRequest?: PageRequest;
}

export interface CreateActivityRequest {
    activityRequest: ActivityRequest;
}

export interface GetActivityByIdRequest {
    activityId?: number;
}

/**
 *
 */
export class ActivityApi extends runtime.BaseAPI {
    /**
     * paginated activities view
     */
    async browseActivitiesRaw(
        requestParameters: BrowseActivitiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PaginatedActivityResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/api/ilp/activities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PageRequestToJSON(requestParameters.pageRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedActivityResponseFromJSON(jsonValue));
    }

    /**
     * paginated activities view
     */
    async browseActivities(
        requestParameters: BrowseActivitiesRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PaginatedActivityResponse> {
        const response = await this.browseActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create new activity record
     */
    async createActivityRaw(
        requestParameters: CreateActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ActivityResponse>> {
        if (requestParameters.activityRequest === null || requestParameters.activityRequest === undefined) {
            throw new runtime.RequiredError(
                'activityRequest',
                'Required parameter requestParameters.activityRequest was null or undefined when calling createActivity.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/api/ilp/activity`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ActivityRequestToJSON(requestParameters.activityRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityResponseFromJSON(jsonValue));
    }

    /**
     * create new activity record
     */
    async createActivity(
        requestParameters: CreateActivityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ActivityResponse> {
        const response = await this.createActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get activity by identifier
     */
    async getActivityByIdRaw(
        requestParameters: GetActivityByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ActivityResponse>> {
        const queryParameters: any = {};

        if (requestParameters.activityId !== undefined) {
            queryParameters['activityId'] = requestParameters.activityId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/ilp/activity/{activity_id}`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityResponseFromJSON(jsonValue));
    }

    /**
     * get activity by identifier
     */
    async getActivityById(
        requestParameters: GetActivityByIdRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ActivityResponse> {
        const response = await this.getActivityByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
