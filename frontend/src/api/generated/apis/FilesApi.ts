/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

import type { ErrorMessage, UploadResponse } from '../models';
import { ErrorMessageFromJSON, ErrorMessageToJSON, UploadResponseFromJSON, UploadResponseToJSON } from '../models';

export interface GetFileRequest {
    scope: GetFileScopeEnum;
    fileName: string;
}

export interface UploadFileRequest {
    scope: UploadFileScopeEnum;
    id: number;
    file: Blob;
}

/**
 *
 */
export class FilesApi extends runtime.BaseAPI {
    /**
     * fetch file from ILP file store
     */
    async getFileRaw(
        requestParameters: GetFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter requestParameters.scope was null or undefined when calling getFile.',
            );
        }

        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter requestParameters.fileName was null or undefined when calling getFile.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/file/{scope}/{fileName}`
                    .replace(`{${'scope'}}`, encodeURIComponent(String(requestParameters.scope)))
                    .replace(`{${'fileName'}}`, encodeURIComponent(String(requestParameters.fileName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * fetch file from ILP file store
     */
    async getFile(
        requestParameters: GetFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * upload file to ILP file store
     */
    async uploadFileRaw(
        requestParameters: UploadFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<UploadResponse>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter requestParameters.scope was null or undefined when calling uploadFile.',
            );
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling uploadFile.',
            );
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter requestParameters.file was null or undefined when calling uploadFile.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request(
            {
                path: `/api/ilp/file/upload/{scope}`.replace(
                    `{${'scope'}}`,
                    encodeURIComponent(String(requestParameters.scope)),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadResponseFromJSON(jsonValue));
    }

    /**
     * upload file to ILP file store
     */
    async uploadFile(
        requestParameters: UploadFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<UploadResponse> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const GetFileScopeEnum = {
    Activity: 'activity',
    Article: 'article',
    Profile: 'profile',
} as const;
export type GetFileScopeEnum = (typeof GetFileScopeEnum)[keyof typeof GetFileScopeEnum];
/**
 * @export
 */
export const UploadFileScopeEnum = {
    Activity: 'activity',
    Article: 'article',
    Profile: 'profile',
} as const;
export type UploadFileScopeEnum = (typeof UploadFileScopeEnum)[keyof typeof UploadFileScopeEnum];
