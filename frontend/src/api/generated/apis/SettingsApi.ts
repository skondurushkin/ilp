/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

import type { ErrorMessage, SettingRequest, SettingResponse } from '../models';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    SettingRequestFromJSON,
    SettingRequestToJSON,
    SettingResponseFromJSON,
    SettingResponseToJSON,
} from '../models';

export interface DeletePropertyRequest {
    name: string;
}

export interface GetPropertyRequest {
    name: string;
}

export interface SetPropertyRequest {
    settingRequest: SettingRequest;
}

/**
 *
 */
export class SettingsApi extends runtime.BaseAPI {
    /**
     * delete property by name
     */
    async deletePropertyRaw(
        requestParameters: DeletePropertyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter requestParameters.name was null or undefined when calling deleteProperty.',
            );
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/setting`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete property by name
     */
    async deleteProperty(
        requestParameters: DeletePropertyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * get property by name
     */
    async getPropertyRaw(
        requestParameters: GetPropertyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SettingResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter requestParameters.name was null or undefined when calling getProperty.',
            );
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/setting`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingResponseFromJSON(jsonValue));
    }

    /**
     * get property by name
     */
    async getProperty(
        requestParameters: GetPropertyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SettingResponse> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update or create property
     */
    async setPropertyRaw(
        requestParameters: SetPropertyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SettingResponse>> {
        if (requestParameters.settingRequest === null || requestParameters.settingRequest === undefined) {
            throw new runtime.RequiredError(
                'settingRequest',
                'Required parameter requestParameters.settingRequest was null or undefined when calling setProperty.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('bearerAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/ilp/setting`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SettingRequestToJSON(requestParameters.settingRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingResponseFromJSON(jsonValue));
    }

    /**
     * update or create property
     */
    async setProperty(
        requestParameters: SetPropertyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SettingResponse> {
        const response = await this.setPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
