/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     *
     * @type {number}
     * @memberof ErrorMessage
     */
    statusCode?: number;
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    statusText?: string;
    /**
     *
     * @type {Date}
     * @memberof ErrorMessage
     */
    timestamp?: Date;
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    category?: ErrorMessageCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    path?: string;
}

/**
 * @export
 */
export const ErrorMessageCategoryEnum = {
    Error: 'ERROR',
    FormError: 'FORM_ERROR',
    ValidationError: 'VALIDATION_ERROR',
    Message: 'MESSAGE',
    Unknown: 'UNKNOWN',
} as const;
export type ErrorMessageCategoryEnum = (typeof ErrorMessageCategoryEnum)[keyof typeof ErrorMessageCategoryEnum];

/**
 * Check if a given object implements the ErrorMessage interface.
 */
export function instanceOfErrorMessage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ErrorMessageFromJSON(json: any): ErrorMessage {
    return ErrorMessageFromJSONTyped(json, false);
}

export function ErrorMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorMessage {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        statusCode: !exists(json, 'statusCode') ? undefined : json['statusCode'],
        statusText: !exists(json, 'statusText') ? undefined : json['statusText'],
        timestamp: !exists(json, 'timestamp') ? undefined : new Date(json['timestamp']),
        category: !exists(json, 'category') ? undefined : json['category'],
        message: !exists(json, 'message') ? undefined : json['message'],
        description: !exists(json, 'description') ? undefined : json['description'],
        path: !exists(json, 'path') ? undefined : json['path'],
    };
}

export function ErrorMessageToJSON(value?: ErrorMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        statusCode: value.statusCode,
        statusText: value.statusText,
        timestamp: value.timestamp === undefined ? undefined : value.timestamp.toISOString(),
        category: value.category,
        message: value.message,
        description: value.description,
        path: value.path,
    };
}
