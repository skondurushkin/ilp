/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ERoleFromJSON, ERoleFromJSONTyped, ERoleToJSON } from './ERole';
import { NameFromJSON, NameFromJSONTyped, NameToJSON } from './Name';
import { exists, mapValues } from '../runtime';

import type { ERole } from './ERole';
import type { Name } from './Name';

/**
 *
 * @export
 * @interface ProfileResponse
 */
export interface ProfileResponse {
    /**
     * generic identifier
     * @type {number}
     * @memberof ProfileResponse
     */
    id: number;
    /**
     *
     * @type {Name}
     * @memberof ProfileResponse
     */
    fio: Name;
    /**
     *
     * @type {string}
     * @memberof ProfileResponse
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof ProfileResponse
     */
    phone: string;
    /**
     *
     * @type {Set<ERole>}
     * @memberof ProfileResponse
     */
    roles: Set<ERole>;
    /**
     *
     * @type {string}
     * @memberof ProfileResponse
     */
    avatarLink: string;
    /**
     *
     * @type {string}
     * @memberof ProfileResponse
     */
    jobPosition: string;
    /**
     *
     * @type {string}
     * @memberof ProfileResponse
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof ProfileResponse
     */
    country: string;
    /**
     *
     * @type {boolean}
     * @memberof ProfileResponse
     */
    readonly active: boolean;
    /**
     *
     * @type {Date}
     * @memberof ProfileResponse
     */
    startDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof ProfileResponse
     */
    endDate?: Date;
}

/**
 * Check if a given object implements the ProfileResponse interface.
 */
export function instanceOfProfileResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'fio' in value;
    isInstance = isInstance && 'email' in value;
    isInstance = isInstance && 'phone' in value;
    isInstance = isInstance && 'roles' in value;
    isInstance = isInstance && 'avatarLink' in value;
    isInstance = isInstance && 'jobPosition' in value;
    isInstance = isInstance && 'city' in value;
    isInstance = isInstance && 'country' in value;
    isInstance = isInstance && 'active' in value;

    return isInstance;
}

export function ProfileResponseFromJSON(json: any): ProfileResponse {
    return ProfileResponseFromJSONTyped(json, false);
}

export function ProfileResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileResponse {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        fio: NameFromJSON(json['fio']),
        email: json['email'],
        phone: json['phone'],
        roles: new Set((json['roles'] as Array<any>).map(ERoleFromJSON)),
        avatarLink: json['avatarLink'],
        jobPosition: json['jobPosition'],
        city: json['city'],
        country: json['country'],
        active: json['active'],
        startDate: !exists(json, 'startDate') ? undefined : new Date(json['startDate']),
        endDate: !exists(json, 'endDate') ? undefined : new Date(json['endDate']),
    };
}

export function ProfileResponseToJSON(value?: ProfileResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        fio: NameToJSON(value.fio),
        email: value.email,
        phone: value.phone,
        roles: Array.from(value.roles as Set<any>).map(ERoleToJSON),
        avatarLink: value.avatarLink,
        jobPosition: value.jobPosition,
        city: value.city,
        country: value.country,
        startDate: value.startDate === undefined ? undefined : value.startDate.toISOString().substr(0, 10),
        endDate: value.endDate === undefined ? undefined : value.endDate.toISOString().substr(0, 10),
    };
}
