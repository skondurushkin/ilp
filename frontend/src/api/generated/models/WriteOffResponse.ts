/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { UserInfoFromJSON, UserInfoFromJSONTyped, UserInfoToJSON } from './UserInfo';
import { WriteOffStatusFromJSON, WriteOffStatusFromJSONTyped, WriteOffStatusToJSON } from './WriteOffStatus';
import { exists, mapValues } from '../runtime';

import type { UserInfo } from './UserInfo';
import type { WriteOffStatus } from './WriteOffStatus';

/**
 *
 * @export
 * @interface WriteOffResponse
 */
export interface WriteOffResponse {
    /**
     * generic identifier
     * @type {number}
     * @memberof WriteOffResponse
     */
    id: number;
    /**
     * generic identifier
     * @type {number}
     * @memberof WriteOffResponse
     */
    articleId: number;
    /**
     *
     * @type {Date}
     * @memberof WriteOffResponse
     */
    date: Date;
    /**
     *
     * @type {UserInfo}
     * @memberof WriteOffResponse
     */
    user: UserInfo;
    /**
     *
     * @type {string}
     * @memberof WriteOffResponse
     */
    articleName: string;
    /**
     * generic amount
     * @type {number}
     * @memberof WriteOffResponse
     */
    amount: number;
    /**
     *
     * @type {WriteOffStatus}
     * @memberof WriteOffResponse
     */
    status: WriteOffStatus;
}

/**
 * Check if a given object implements the WriteOffResponse interface.
 */
export function instanceOfWriteOffResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'articleId' in value;
    isInstance = isInstance && 'date' in value;
    isInstance = isInstance && 'user' in value;
    isInstance = isInstance && 'articleName' in value;
    isInstance = isInstance && 'amount' in value;
    isInstance = isInstance && 'status' in value;

    return isInstance;
}

export function WriteOffResponseFromJSON(json: any): WriteOffResponse {
    return WriteOffResponseFromJSONTyped(json, false);
}

export function WriteOffResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): WriteOffResponse {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        articleId: json['articleId'],
        date: new Date(json['date']),
        user: UserInfoFromJSON(json['user']),
        articleName: json['articleName'],
        amount: json['amount'],
        status: WriteOffStatusFromJSON(json['status']),
    };
}

export function WriteOffResponseToJSON(value?: WriteOffResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        articleId: value.articleId,
        date: value.date.toISOString().substr(0, 10),
        user: UserInfoToJSON(value.user),
        articleName: value.articleName,
        amount: value.amount,
        status: WriteOffStatusToJSON(value.status),
    };
}
