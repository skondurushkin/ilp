/* tslint:disable */
/* eslint-disable */
/**
 * ILP API
 * Internal Loyalty Program API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface UsersPeriodRequestPeriod
 */
export interface UsersPeriodRequestPeriod {
    /**
     *
     * @type {string}
     * @memberof UsersPeriodRequestPeriod
     */
    start: string;
    /**
     *
     * @type {string}
     * @memberof UsersPeriodRequestPeriod
     */
    end: string;
    /**
     *
     * @type {string}
     * @memberof UsersPeriodRequestPeriod
     */
    interval: UsersPeriodRequestPeriodIntervalEnum;
}

/**
 * @export
 */
export const UsersPeriodRequestPeriodIntervalEnum = {
    Hour: 'hour',
    Day: 'day',
} as const;
export type UsersPeriodRequestPeriodIntervalEnum =
    (typeof UsersPeriodRequestPeriodIntervalEnum)[keyof typeof UsersPeriodRequestPeriodIntervalEnum];

/**
 * Check if a given object implements the UsersPeriodRequestPeriod interface.
 */
export function instanceOfUsersPeriodRequestPeriod(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'start' in value;
    isInstance = isInstance && 'end' in value;
    isInstance = isInstance && 'interval' in value;

    return isInstance;
}

export function UsersPeriodRequestPeriodFromJSON(json: any): UsersPeriodRequestPeriod {
    return UsersPeriodRequestPeriodFromJSONTyped(json, false);
}

export function UsersPeriodRequestPeriodFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): UsersPeriodRequestPeriod {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        start: json['start'],
        end: json['end'],
        interval: json['interval'],
    };
}

export function UsersPeriodRequestPeriodToJSON(value?: UsersPeriodRequestPeriod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        start: value.start,
        end: value.end,
        interval: value.interval,
    };
}
